/*DYNAMIC PROGRAMMING LCS CHILD QUESTION ðŸ™‚
Just the length of the Longest common subsequence is enough to tell whether string s is present as subsequence in string t or not .

CODE :  */

class Solution {
public:
    bool isSubsequence(string s, string t) {
        int n=s.size(),m=t.size();
        int t1[n+1][m+1];
        
        for(int i=0;i<n+1;i++)  t1[i][0]=0;
      
        for(int i=0;i<m+1;i++)  t1[0][i]=0;
    
        for(int i=1;i<n+1;i++)
           for(int j=1;j<m+1;j++)
            {
               if(s[i-1]==t[j-1])
               {
                  t1[i][j]= 1+ t1[i-1][j-1];
               }
                else
                {
                   t1[i][j]=max(t1[i-1][j],t1[i][j-1]);
                } 
            }
      
        if( t1[n][m]==n)return true;
        return false;
    }
};




//APPROACH 1 

class Solution {
public:
bool isSubsequence(string s, string t) 
{
   int j = 0;
   for(int i=0 ; i<t.size() ; ++i)
   {
      if(t[i] == s[j])
      {
        j++;
      }
   }
return (j == s.size());
    
}
};





// APPROACH 2 pointer 


class Solution {
public:
    bool isSubsequence(string s, string t) {
        int m = s.size();
        int n = t.size();
        int i = 0, j = 0;
        while(i < m && j < n) {
            if(s[i] == t[j]) {
                i++;
            }
            j++;
        }
        return i == m ? 1 : 0;
    }
};